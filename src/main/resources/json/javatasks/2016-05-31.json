[
    {
        "type": "message",
        "user": "U150DHUL9",
        "text": "<@U15KGKN2J>: \u0442\u044b \u043f\u043e\u0437\u0436\u0435 \u043f\u043e\u0439\u043c\u0435\u0448\u044c \u0447\u0442\u043e JMS \u0437\u0434\u0435\u0441\u044c \u043a\u0430\u043a \u043d\u0435\u043b\u044c\u0437\u044f \u043b\u0443\u0447\u0448\u0435",
        "ts": "1464679296.001342"
    },
    {
        "type": "message",
        "user": "U180A3J2D",
        "text": "\u0422\u043e \u0447\u0442\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0441\u043f\u043e\u0440\u0438\u0442, \u0434\u0440\u0443\u0433\u043e\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0442\u043e activemq \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c html \u043f\u0438\u0441\u044c\u043c\u043e, \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u044f\u0432\u043d\u043e activemq \u043d\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d. \u041c\u043e\u0436\u043d\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441?",
        "ts": "1464697499.001343"
    },
    {
        "type": "message",
        "user": "U150DHUL9",
        "text": "\u042d\u0442\u043e \u043d\u0435 \u043a\u043e \u043c\u043d\u0435. \u041b\u0443\u0447\u0448\u0435 \u043f\u0440\u0438\u0437\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0431\u0440\u0430\u0442\u044c\u0435\u0432 \u043f\u043e \u043d\u0435\u0441\u0447\u0430\u0441\u0442\u044c\u044e.",
        "ts": "1464728049.001344"
    },
    {
        "type": "message",
        "user": "U18USSTLJ",
        "text": "<https:\/\/www.google.com.ua\/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=javamail%20how%20to%20send%20html%20email>",
        "ts": "1464730542.001345"
    },
    {
        "type": "message",
        "user": "U18USSTLJ",
        "text": "<@U180A3J2D>:  \u044d\u0442\u043e \u0442\u0435\u0431\u0435",
        "ts": "1464730559.001346"
    },
    {
        "type": "message",
        "user": "U180A3J2D",
        "text": "<@U18USSTLJ>: \u0430\u0433\u0430 \u0441\u0443\u043f\u0435\u0440. \u0410 \u043f\u0440\u0438\u0447\u0451\u043c \u0442\u0443\u0442 activemq?",
        "ts": "1464730686.001347"
    },
    {
        "type": "message",
        "user": "U18USSTLJ",
        "text": "<https:\/\/manbuildswebsite.com\/2010\/04\/02\/sending-asynchronous-html-email-in-grails-with-activemq-jms-and-gmail\/>",
        "attachments": [
            {
                "service_name": "Man Builds Website",
                "service_url": "http:\/\/manbuildswebsite.com",
                "title": "Sending Asynchronous HTML Email in Grails with ActiveMQ, JMS and\u00a0Gmail",
                "title_link": "https:\/\/manbuildswebsite.com\/2010\/04\/02\/sending-asynchronous-html-email-in-grails-with-activemq-jms-and-gmail\/",
                "author_name": "Dave",
                "author_link": "https:\/\/manbuildswebsite.com\/author\/lourish\/",
                "thumb_url": "https:\/\/i1.wp.com\/lourish.files.wordpress.com\/2010\/04\/async-mail-overview.png?fit=200%2C150",
                "thumb_width": 199,
                "thumb_height": 92,
                "text": "Sending email asynchronously is an essential part of most Web applications and there are many ways in which to implement it. In this post I&amp;rsquo;ve chosen to demonstrate how to set up JMS, ActiveMQ and Gmail with the Grails Mail plugin to provide asynchronous email capabilities while only having to write a few lines of code, all thanks to some great plugins. I&amp;rsquo;ll also show the fantastic Grails Mail templating feature which uses GSP views to generate HTML emails along with a solution for one of the big bugs with it too!\n\nDesign\nBelow is an overview of the system I&amp;rsquo;ll be building.\nDesign Overview\nThe EmailService handles the synchronous part of sending (queueing, adapting, formatting), the SendMailQueue is ActiveMQ via JMS and the SendMailService handles the background sending of the email using the Grails Mail plugin connecting to Gmail over SMTPS\/SSL.\nSetup\nYou will need Grails 1.2.x or newer and these plugins:\nJMS\nActiveMQ \nMail\nYou will also need a Gmail account if you want to reproduce this entire tutorial. I set up a premium account but the configuration should be the same for a free account.\nConfiguration\nMost of the effort is in getting the configuration right, and it&amp;rsquo;s not really any work at all as I&amp;rsquo;ve worked it out for you! We just need to set up an ActiveMQ Spring bean as our JMS provider and configure the mail plugin to use a Gmail account.\nSpring Configuration\nIf you don&amp;rsquo;t have an external ActiveMQ server you&amp;rsquo;ll need to set up a local one by adding a connection factory bean. In the following example I also set up a connection pool to improve performance (otherwise there&amp;rsquo;s a performance hit on every message sent). Just add this to Resources.groovy:\nbeans = {\n    jmsConnectionFactory(org.apache.activemq.pool.PooledConnectionFactory){bean -&amp;gt;\n        bean.destroyMethod =\"stop\"\n        connectionFactory(org.apache.activemq.ActiveMQConnectionFactory) {\n            brokerURL = \"<tcp:\/\/localhost:61616>\"\n        }\n    }\n}\nJavaMail settings for Gmail\nThere is a huge amount of conflicting information about how JavaMail should be configured for Gmail, it&amp;rsquo;s an interesting case as it requires an SSL connection, rather than a plain SMTP one.&amp;nbsp;However, I can guarantee that the following settings work for the Grails Mail plugin (and therefore also for Spring&amp;rsquo;s SimpleMailMessage) with a Gmail account.\nIn Config.groovy add the following (and replace the username and password with your own!):\ngrails.mail.host = \"<http:\/\/smtp.gmail.com|smtp.gmail.com>\"\ngrails.mail.from = \"<mailto:address@mydomain.com|address@mydomain.com>\"\ngrails.mail.port = \"465\"\ngrails.mail.username = \"<mailto:user@mydomain.com|user@mydomain.com>\"\ngrails.mail.password = \"mypassword\"\ngrails.mail.props = [\"mail.smtp.auth\": \"true\",\n        \"mail.smtp.socketFactory.port\": \"465\",\n        \"mail.smtp.socketFactory.class\": \"javax.net.ssl.SSLSocketFactory\",\n        \"mail.smtp.socketFactory.fallback\": \"false\",\n        \"mail.smtp.starttls.enable\": \"true\",\n        \"mail.debug\": \"true\"]\nThe last item in the props setting &amp;ndash; mail.debug &amp;ndash; provides some useful logging, more on that below, but you can remove it when you have it working.\nOf course, it&amp;rsquo;s unlikely that you&amp;rsquo;ll have the same mail server for dev, test and prod so you can set up different environment configurations:\nenvironments {\n    production {\n        grails.mail.host = \"<http:\/\/smtp.gmail.com|smtp.gmail.com>\"\n        grails.mail.port = \"465\"\n        grails.mail.username = \"<mailto:user@mydomain.com|user@mydomain.com>\"\n        grails.mail.password = \"mypassword\"\n        grails.mail.props = [\"mail.smtp.auth\": \"true\",\n                \"mail.smtp.socketFactory.port\": \"465\",\n                \"mail.smtp.socketFactory.class\": \"javax.net.ssl.SSLSocketFactory\",\n                \"mail.smtp.socketFactory.fallback\": \"false\",\n                \"mail.smtp.starttls.enable\": \"true\",\n                \"mail.debug\": \"true\"]\n\n    }\n    development {\n        grails.mail.host = \"<http:\/\/smtp.gmail.com|smtp.gmail.com>\"\n        grails.mail.port = \"465\"\n        grails.mail.username = \"<mailto:devuser@mydevdomain.com|devuser@mydevdomain.com>\"\n        grails.mail.password = \"mydevpassword\"\n        grails.mail.props = [\"mail.smtp.auth\": \"true\",\n                \"mail.smtp.socketFactory.port\": \"465\",\n                \"mail.smtp.socketFactory.class\": \"javax.net.ssl.SSLSocketFactory\",\n                \"mail.smtp.socketFactory.fallback\": \"false\",\n                \"mail.smtp.starttls.enable\": \"true\",\n                \"mail.debug\": \"true\"]\n    }\n}\nYou may be tempted to add the config like this:\ndevelopment {\n        grails {\n            mail {\n                host = \"<http:\/\/smtp.gmail.com|smtp.gmail.com>\"\n                port = ...\nDon&amp;rsquo;t! By defining a &amp;ldquo;grails&amp;rdquo; closure you will clear all previously defined settings for the &amp;ldquo;grails&amp;rdquo; key!\nImplementing the Services\nWe&amp;rsquo;re almost finished and we haven&amp;rsquo;t yet written a line of real code! Let&amp;rsquo;s start with the EmailService which will help us queue the messages:\nEmailService\nLet&amp;rsquo;s create a new non-transactional service named EmailService, in this service we could add any request processing, security checks and adapt the request for queuing.\npackage lourish\n\nclass EmailService {\n\n    boolean transactional = false\n\n    def sendEmail(attrs) {\n        sendJMSMessage(\"sendMail\",\n                [to: <http:\/\/attrs.to|attrs.to>,\n                 from: attrs.from,\n                 subject: attrs.subject,\n                 view: attrs.view,\n                 model: attrs.model])\n    }\n}\nThis service method is just one call to sendJMSMessage (a meta-method added to all services and controllers by the JMS plugin). The first argument is the queue name we&amp;rsquo;re sending to and the second is the JMS message itself, in this case a map defining the email to send.\nMake sure that everything you send over an ActiveMQ queue is a  primitive type, map or list &amp;ndash; it ought to be possible to send  serializable objects but in my experience it simply doesn&amp;rsquo;t work!\nSendMailService\nThe JMS plugin is set up to deliver messages to any service &amp;ldquo;exposed&amp;rdquo; to JMS which has the same name as the queue the message is on. So in the EmailService we send the message on the sendMail queue so the JMS plugin will try to find a service named SendMailService and call its onMessage method:\npackage lourish\n\nclass SendMailService {\n    boolean transactional = false\n\n    \/\/Tell the JMS plugin that this is a message endpoint\n    static expose = ['jms']\n\n    \/\/The Mail plugin service\n    def mailService\n\n    def onMessage(emailMessage) {\n        try {\n            mailService.sendMail {\n                to <http:\/\/emailMessage.to|emailMessage.to>\n                from emailMessage.from\n                subject emailMessage.subject\n                body(view: emailMessage.view, model: emailMessage.model)\n\n            }\n        } catch (Exception e) {\n            log.error(\"Failed to send email ${emailMessage}\", e)\n        }\n        \/\/Return null to avoid poison messages\n        return null\n    }\n}\nNotice that the onMessage method is returning null &amp;ndash; this is important as it tells the MessageListenerAdapter that the method has run successfully. If you return anything else it will be assumed it&amp;rsquo;s a retry message and you could end up with a poison messaged in your queue.\nAlso note that the &amp;ldquo;mailService&amp;rdquo; bean is set up by the Mail plugin and there are more details in the plugin documentation about how it works.\nHTML Templates\nAs we&amp;rsquo;re sending HTML emails we need to create a template GSP for the message body as defined in the &amp;ldquo;view&amp;rdquo; parameter of the JMS message. Create the following helloWorld.gsp template in grails-app\/views\/emails:\n\n\n${greeting}\n\nI&amp;rsquo;d recommend a good read of the Mail plugin and Spring JMS docs for full details. Bear in mind that the email templates don&amp;rsquo;t support sitemesh layouts.\nSending a Mail\nThat&amp;rsquo;s the services created and the system configured so we can try it out.\nAn Example Controller\nHere&amp;rsquo;s an example of a controller to send a test email to demonstrate how the whole thing works:\npackage lourish\n\nclass SendMailController {\n    \/\/Our email queuing service\n    def emailService\n\n    def index = {\n        try {\n            emailService.send(to: \"<mailto:myemail@emailaddress.com|myemail@emailaddress.com>\",\n                from: \"<mailto:me@gmail.com|me@gmail.com>\",\n                subject: \"Test HTML mail using JMS, ActiveMQ, and the Grails Mail plugin\",\n                model: [greeting: \"Hello World!\"],\n                view: \"\/emails\/helloWorld\")\n\n        } catch (Exception e) {\n            log.error(\"${e}\", e)\n            flash.message = \"Mail not sent: ${e}\"\n            return\n        }\n        flash.message = \"Mail sent\"\n    }\n}\nand a corresponding GSP in views\/sendMail\/index.gsp:\n\n\nMail Test${flash.message}\n\nYou can now run the app and browse to \/sendMail to send an email.\nDebug\nWhen you run the app, you should not only receive an email but you should also see some logging from Java mail if you have the debug in. It will look a bit like this:\nDEBUG: JavaMail version 1.4.1\nDEBUG: not loading file: C:\\java\\jdk1.6.0_16\\jre\\lib\\javamail.providers\nDEBUG: java.io.FileNotFoundException: C:\\java\\jdk1.6.0_16\\jre\\lib\\javamail.providers (The system cannot find the file specified)\nDEBUG: !anyLoaded\nDEBUG: not loading resource: \/META-INF\/javamail.providers\nDEBUG: successfully loaded resource: \/META-INF\/javamail.default.providers\nDEBUG: Tables of loaded providers\nDEBUG: Providers Listed By Class Name: {com.sun.mail.smtp.SMTPSSLTransport=javax.mail.Provider[TRANSPORT,smtps,com.sun.mail.smtp.SMTPSSLTransport,Sun Microsystems, Inc], com.sun.mail.smtp.SMTPTransport=javax.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Sun Microsystems, Inc], com.sun.mail.imap.IMAPSSLStore=javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Sun Microsystems, Inc], com.sun.mail.pop3.POP3SSLStore=javax.mail.Provider[STORE,pop3s,com.sun.mail.pop3.POP3SSLStore,Sun Microsystems, Inc], com.sun.mail.imap.IMAPStore=javax.mail.Provider[STORE,imap,com.sun.mail.imap.IMAPStore,Sun Microsystems, Inc], com.sun.mail.pop3.POP3Store=javax.mail.Provider[STORE,pop3,com.sun.mail.pop3.POP3Store,Sun Microsystems, Inc]}\nDEBUG: Providers Listed By Protocol: {imaps=javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Sun Microsystems, Inc], imap=javax.mail.Provider[STORE,imap,com.sun.mail.imap.IMAPStore,Sun Microsystems, Inc], smtps=javax.mail.Provider[TRANSPORT,smtps,com.sun.mail.smtp.SMTPSSLTransport,Sun Microsystems, Inc], pop3=javax.mail.Provider[STORE,pop3,com.sun.mail.pop3.POP3Store,Sun Microsystems, Inc], pop3s=javax.mail.Provider[STORE,pop3s,com.sun.mail.pop3.POP3SSLStore,Sun Microsystems, Inc], smtp=javax.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Sun Microsystems, Inc]}\nDEBUG: successfully loaded resource: \/META-INF\/javamail.default.address.map\nDEBUG: !anyLoaded\nDEBUG: not loading resource: \/META-INF\/javamail.address.map\nDEBUG: not loading file: C:\\java\\jdk1.6.0_16\\jre\\lib\\javamail.address.map\nDEBUG: java.io.FileNotFoundException: C:\\java\\jdk1.6.0_16\\jre\\lib\\javamail.address.map (The system cannot find the file specified)\nIf it gets to this point and stops, it means that the mailService bean has initialised but sending the mail has failed because of some application issue before connecting to the remote mail server. Note that the exceptions in the logging above are benign if they&amp;rsquo;re at DEBUG level so don&amp;rsquo;t be confused by them, you&amp;rsquo;ll need to check your application logging for the real problem.\nRunning in a WAR\nThere is a bug in the Mail plugin which means that sending mail using templates fails when an application is packaged as a WAR and deployed in a container. The exception you&amp;rsquo;ll see is:\norg.springframework.jms.listener.adapter.ListenerExecutionFailedException:\n&amp;nbsp;Listener method 'onMessage' threw exception; nested exception is\n  java.lang.NoClassDefFoundError: org\/springframework\/mock\/web\/MockHttpServletRequest\nThe problem is that the Mail plugin relies on the MockHttpServletRequest class in the spring test jar which is unavailable when running in a WAR, but present when using run-app. To resolve this issue it&amp;rsquo;s necessary to add the Spring Framework test jar, in my case $GRAILS_HOME\/lib\/org.springframework.test-3.0.0.RELEASE.jar, to your lib directory. It&amp;rsquo;s an ugly fix, but hopefully it will only be temporary.\nFurther Reading\nI hope that I&amp;rsquo;ve provided a useful overview of queued email which is suitable for production Web applications. In most large companies the mail server is likely to be local so you probably won&amp;rsquo;t have to deal with Gmail, however the concepts remain the same.\nFor more information on the topics in this post also see:\nGrails Mail Plugin: <http:\/\/www.grails.org\/Mail+plugin>\nGrails JMS Plugin: <http:\/\/www.grails.org\/JMS+Plugin>\nGrails ActiveMQ Plugin: <http:\/\/www.grails.org\/ActiveMQ+Plugin>\nIntegrating ActiveMQ with Spring: <http:\/\/activemq.apache.org\/spring-support.html>\nSpring JMS support: <http:\/\/static.springsource.org\/spring\/docs\/3.0.x\/spring-framework-reference\/html\/jms.html>",
                "fallback": "Man Builds Website Link: Sending Asynchronous HTML Email in Grails with ActiveMQ, JMS and&nbsp;Gmail",
                "from_url": "https:\/\/manbuildswebsite.com\/2010\/04\/02\/sending-asynchronous-html-email-in-grails-with-activemq-jms-and-gmail\/",
                "service_icon": "https:\/\/s0.wp.com\/i\/webclip.png",
                "id": 1
            }
        ],
        "ts": "1464733447.001348"
    }
]